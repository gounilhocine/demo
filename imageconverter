
Type d'image: https://developer.mozilla.org/fr/docs/Web/Media/Formats/Types_des_images

https://github.com/dragon66/icafe



https://github.com/rkalla/imgscalr
https://stackoverflow.com/questions/15429011/how-to-convert-tiff-to-jpeg-png-in-java
<!-- https://mvnrepository.com/artifact/org.imgscalr/imgscalr-lib -->
<dependency>
    <groupId>org.imgscalr</groupId>
    <artifactId>imgscalr-lib</artifactId>
    <version>4.2</version>
</dependency>
<dependency>
 <groupId>com.github.jai-imageio</groupId>
 <artifactId>jai-imageio-core</artifactId>
 <version>1.3.1</version> </dependency>
 
 <!-- https://mvnrepository.com/artifact/com.github.jai-imageio/jai-imageio-jpeg2000 -->
<dependency>
    <groupId>com.github.jai-imageio</groupId>
    <artifactId>jai-imageio-jpeg2000</artifactId>
    <version>1.3.0</version>
</dependency>

<dependency>
  <groupId>im4java</groupId>
  <artifactId>im4java</artifactId>
  <version>0.98.0</version>
</dependency>


https://stackoverflow.com/questions/2291358/how-do-i-convert-a-tif-to-png-in-java
<!-- https://mvnrepository.com/artifact/com.sun.media/jai-codec -->
<dependency>
    <groupId>com.sun.media</groupId>
    <artifactId>jai-codec</artifactId>
    <version>1.1.3</version>
</dependency>
<!-- https://mvnrepository.com/artifact/javax.media.jai/com.springsource.javax.media.jai.codec -->
<dependency>
    <groupId>javax.media.jai</groupId>
    <artifactId>com.springsource.javax.media.jai.codec</artifactId>
    <version>1.1.3</version>
</dependency>



















package com.image;

import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.awt.image.renderable.ParameterBlock;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;
import java.util.stream.IntStream;

import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import javax.media.jai.JAI;
import javax.media.jai.RenderedOp;

import org.imgscalr.Scalr;
import org.imgscalr.Scalr.Method;
import org.imgscalr.Scalr.Mode;

import com.sun.media.jai.codec.FileSeekableStream;
import com.sun.media.jai.codec.ImageCodec;
import com.sun.media.jai.codec.ImageDecoder;
import com.sun.media.jai.codec.SeekableStream;

public class ImageConverter {

	public static void main(String[] args) throws Exception {

		String imageSrc = "c:/demo/indezer/image2image/src.tiff";
		String imageDest = "c:/demo/indezer/image2image/dest.png";
		File fileSrc = new File(imageSrc);
		InputStream inputStream = new FileInputStream(fileSrc);

		File fileDest = new File(imageDest);
		OutputStream os = new FileOutputStream(fileDest);

		// resize("png", inputStream, os, 150, 150);
		// readMultiPageTiff(imageSrc);*
		convertTiffToPng(fileSrc);
	}

	synchronized public static void resize(String filename, InputStream orig, OutputStream dest, int width, int height) throws IOException {
		if (width > 0 || height > 0) {

			// String formatName = getFormatName(filename);

			Mode mode = Mode.AUTOMATIC;
			if (height == 0)
				mode = Mode.FIT_TO_WIDTH;
			else if (width == 0)
				mode = Mode.FIT_TO_HEIGHT;

			BufferedImage src = ImageIO.read(orig);
			BufferedImage thumbnail = null;
			if (src.getHeight() < height && src.getWidth() < width) {
				thumbnail = src;
			} else {
				thumbnail = Scalr.resize(src, Method.ULTRA_QUALITY, mode, width, height);
			}
			if (!ImageIO.write(thumbnail, filename, dest)) {
				throw new IOException("ImageIO.write error");
			}
		}
	}

	public static void convertTiffToPng(File file) {
		try {
			try (InputStream is = new FileInputStream(file)) {
				try (ImageInputStream imageInputStream = ImageIO.createImageInputStream(is)) {
					Iterator<ImageReader> iterator = ImageIO.getImageReaders(imageInputStream);
					if (iterator == null || !iterator.hasNext()) {
						throw new RuntimeException("Image file format not supported by ImageIO: " + file.getAbsolutePath());
					}

					// We are just looking for the first reader compatible:
					ImageReader reader = iterator.next();
					reader.setInput(imageInputStream);

					int numPage = reader.getNumImages(true);

					// it uses to put new png files, close to original example n0_.tiff will be in /png/n0_0.png
					String name = file.getName();
					String parentFolder = file.getParentFile().getAbsolutePath();

					IntStream.range(0, numPage).forEach(v -> {
						try {
							final BufferedImage tiff = reader.read(v);
							ImageIO.write(tiff, "png", new File(parentFolder + File.separator + "test.PSD"));
						} catch (IOException e) {
							e.printStackTrace();
						}
					});
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static RenderedImage[] readMultiPageTiff(String fileName) throws IOException {
		File file = new File(fileName);
		SeekableStream seekableStream = new FileSeekableStream(file);
		ImageDecoder decoder = ImageCodec.createImageDecoder("tiff", seekableStream, null);
		// int numPages = decoder.getNumPages();
		RenderedImage image[] = new RenderedImage[1];
		// int count = 0;
		// for (
		// int i = 0;
		// i < decoder.getNumPages();
		// i++) {
		// image[i] = decoder.decodeAsRenderedImage(i);
		// count++;
		// }

		String newFolderName;
		String s3 = fileName;
		String[] temp = null;
		temp = s3.split("\\.");

		int j;
		j = 0;
		do {
			newFolderName = temp[j];
			String spoonFeeding = newFolderName;
			File f = new File(spoonFeeding);
			f.mkdirs();
			j++;
		} while (j < 1);

		for (
				int i = 0;
				i < 1;
				i++) {
			RenderedImage page = decoder.decodeAsRenderedImage(i);
			File fileObj = new File(newFolderName + "/" + (i + 1) + ".png");
			System.out.println("Saving " + fileObj.getCanonicalPath());
			ParameterBlock parBlock = new ParameterBlock();
			parBlock.addSource(page);
			parBlock.add(fileObj.toString());
			parBlock.add("png");
			RenderedOp renderedOp = JAI.create("filestore", parBlock);
			renderedOp.dispose();
		}
		return image;
	}

}





